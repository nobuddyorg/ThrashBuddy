name: Quality Gate
sdfsdf
on:
  pull_request:
    branches: [main]

  push:
    branches: [main]

  workflow_dispatch:

permissions:
  contents: read
  issues: read
  checks: write
  pull-requests: write

jobs:
  api:
    name: api Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
      - name: Install Dependencies and Run Unit Tests
        working-directory: ./apps/api
        run: ./gradlew clean jacocoTestReport
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action/linux@v2
        if: always()
        with:
          check_name: "api Unit Tests"
          files: |
            ./apps/api/build/test-results/**/*.xml
      - name: Install ReportGenerator
        run: |
          dotnet tool install --global dotnet-reportgenerator-globaltool
      - name: Convert JaCoCo to Cobertura
        run: |
          reportgenerator \
            -reports:./apps/api/build/reports/jacoco/test/jacocoTestReport.xml \
            -targetdir:coverage-report \
            -reporttypes:Cobertura
      - name: Generate Coverage Report Summary
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage-report/Cobertura.xml
          badge: true
          fail_below_min: true
          hide_complexity: true
          format: markdown
          output: both
          thresholds: "60 80"
      - name: Append Coverage Report to GitHub Summary
        if: always()
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY
      - name: Post Coverage Comment to PR
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-file: code-coverage-results.md
          token: ${{ secrets.GITHUB_TOKEN }}

  ui:
    name: ui Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
      - name: Install Dependencies
        working-directory: ./apps/ui
        run: ./npmw install
      - name: Unit Tests and Coverage
        working-directory: ./apps/ui
        run: ./npmw run test:ci
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action/linux@v2
        if: always()
        with:
          check_name: "ui Unit Tests"
          files: |
            ./apps/ui/TESTS-Chrome_Headless_*.xml
      - name: Show Coverage Summary in PR
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: ./apps/ui/coverage/thrash-buddy/coverage.xml
          badge: true
          fail_below_min: true
          hide_complexity: true
          format: markdown
          output: both
          thresholds: "60 80"
      - name: Append Coverage Report to GitHub Summary
        if: always()
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY
      - name: Post Coverage Comment to PR
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-file: code-coverage-results.md
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Lint
        working-directory: ./apps/ui
        run: ./npmw run lint

  infra-and-images:
    concurrency:
      group: "test--infra-group-${{ github.event.pull_request.number }}"
      cancel-in-progress: false
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' # takes too long for pushes
    needs: [api, ui]
    name: Infrastructure and Images
    runs-on: self-hosted
    steps:
      - name: Clean up workspace
        run: rm -rf $GITHUB_WORKSPACE/*
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Write .env file
        working-directory: ./configs
        run: echo "${{ secrets.DOT_ENV }}" > .env
      - uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./apps/api/Dockerfile
          ignore: DL3018
      - uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./apps/ui/Dockerfile
          ignore: DL3018
      - uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./apps/k6/Dockerfile
          ignore: DL3018

      - name: Set up Kubernetes with Minikube
        run: |
          minikube delete --all
          minikube start --driver=docker
          eval $(minikube -p minikube docker-env --shell=bash)  # Exports the required Docker environment variables
          echo "DOCKER_TLS_VERIFY=${DOCKER_TLS_VERIFY}" >> $GITHUB_ENV
          echo "DOCKER_HOST=${DOCKER_HOST}" >> $GITHUB_ENV
          echo "DOCKER_CERT_PATH=${DOCKER_CERT_PATH}" >> $GITHUB_ENV
          echo "MINIKUBE_ACTIVE_DOCKERD=${MINIKUBE_ACTIVE_DOCKERD}" >> $GITHUB_ENV

      - name: Cleanup all Docker resources
        run: |
          docker system prune -a -f --volumes
          docker network prune -f
          docker builder prune -f
          docker image prune -a -f

      - name: Build Docker Images
        run: |
          ./buddy.sh docker build-all
          docker images

      - name: Helm
        run: |
          ./buddy.sh helm install
      - name: ui tests
        working-directory: ./tests/ui
        run: |
          # Start port-forwarding to the ingress-nginx-controller
          . ../../scripts/setup/get-config.sh
          kubectl port-forward --namespace $NAMESPACE svc/ingress-nginx-controller 8080:80 >/dev/null 2>&1 &

          # Wait for the port-forward to be established
          sleep 5

          # Set the BASE_URL for Playwright tests
          export SUFFIX=":8080"
          export BASE_URL="http://localhost${SUFFIX}/"

          # Run tests
          ./npmw ci
          ./npmw run install
          ./npmw run test
      - name: Publish Playwright Test Results
        uses: EnricoMi/publish-unit-test-result-action/linux@v2
        if: always()
        with:
          check_name: "Playwright UI Tests"
          files: ./tests/ui/test-results/results.xml
      - name: Archive Playwright Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: report.zip
          path: |
            tests/ui/test-results
            tests/ui/playwright-report
          retention-days: 7
      - name: Minikube delete cluster
        if: always()
        run: |
          pkill kubectl -9
          minikube delete --all
